schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type AddSessionPayload {
  session: Session
  errors: [UserError!]
}

type AddSpeakerPayload {
  speaker: Speaker
  errors: [UserError!]
}

type AddTrackPayload {
  track: Track
  errors: [UserError!]
}

type Attendee implements Node {
  id: ID!
  sessions: [Session]
  firstName: String!
  lastName: String!
  userName: String!
  emailAddress: String
}

"A connection to a list of items."
type AttendeeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AttendeeEdge!]
  "A flattened list of the nodes."
  nodes: [Attendee!]
}

"An edge in a connection."
type AttendeeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Attendee!
}

type CheckInAttendeePayload {
  session: Session
  attendee: Attendee
  errors: [UserError!]
}

type ModifySpeakerPayload {
  speaker: Speaker
  errors: [UserError!]
}

type Mutation {
  registerAttendee(input: RegisterAttendeeInput!): RegisterAttendeePayload!
  checkInAttendee(input: CheckInAttendeeInput!): CheckInAttendeePayload!
  addSession(input: AddSessionInput!): AddSessionPayload!
  scheduleSession(input: ScheduleSessionInput!): ScheduleSessionPayload!
  addSpeaker(input: AddSpeakerInput!): AddSpeakerPayload!
  modifySpeaker(input: ModifySpeakerInput!): ModifySpeakerPayload!
  addTrack(input: AddTrackInput!): AddTrackPayload!
  renameTrack(input: RenameTrackInput!): RenameTrackPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  node(id: ID!): Node
  attendees(first: Int, after: String, last: Int, before: String): AttendeeConnection
  attendeeById(id: ID!): Attendee!
  attendeesById(ids: [ID!]!): [Attendee!]!
  sessions(first: Int, after: String, last: Int, before: String, where: SessionFilterInput, order: [SessionSortInput]): SessionConnection
  sessionById(id: ID!): Session!
  sessionsById(ids: [ID!]!): [Session!]!
  speakers(first: Int, after: String, last: Int, before: String): SpeakerConnection
  speakerById(id: ID!): Speaker!
  speakersById(ids: [ID!]!): [Speaker!]!
  tracks(first: Int, after: String, last: Int, before: String): TrackConnection
  trackByName(name: String!): Track!
  trackByNames(names: [String!]!): [Track!]!
  trackById(id: ID!): Track!
}

type RegisterAttendeePayload {
  attendee: Attendee
  errors: [UserError!]
}

type RenameTrackPayload {
  track: Track
  errors: [UserError!]
}

type ScheduleSessionPayload {
  track: Track
  speakers: [Speaker!]
  session: Session
  errors: [UserError!]
}

type Session implements Node {
  id: ID!
  speakers: [Speaker]
  attendees: [Attendee]
  track: Track
  trackId: ID
  title: String!
  abstract: String
  startTime: DateTime
  endTime: DateTime
  duration: TimeSpan!
}

type SessionAttendeeCheckIn {
  checkInCount: Int!
  attendee: Attendee!
  attendeeId: ID!
  sessionId: ID!
}

"A connection to a list of items."
type SessionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SessionEdge!]
  "A flattened list of the nodes."
  nodes: [Session!]
}

"An edge in a connection."
type SessionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Session!
}

type Speaker implements Node {
  id: ID!
  sessions: [Session]
  name: String!
  bio: String
  webSite: String
}

"A connection to a list of items."
type SpeakerConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SpeakerEdge!]
  "A flattened list of the nodes."
  nodes: [Speaker!]
}

"An edge in a connection."
type SpeakerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Speaker!
}

type Subscription {
  onAttendeeCheckedIn(sessionId: ID!): SessionAttendeeCheckIn!
  onSessionScheduled: Session!
}

type Track implements Node {
  id: ID!
  sessions(first: Int, after: String, last: Int, before: String): SessionConnection
  name: String!
}

"A connection to a list of items."
type TrackConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TrackEdge!]
  "A flattened list of the nodes."
  nodes: [Track!]
}

"An edge in a connection."
type TrackEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Track!
}

type UserError {
  message: String!
  code: String!
}

input AddSessionInput {
  title: String!
  abstract: String
  speakerIds: [ID!]!
}

input AddSpeakerInput {
  name: String!
  bio: String
  webSite: String
}

input AddTrackInput {
  name: String!
}

input AttendeeFilterInput {
  and: [AttendeeFilterInput!]
  or: [AttendeeFilterInput!]
  id: ComparableOperationFilterInputOfInt32FilterInput
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  userName: StringOperationFilterInput
  emailAddress: StringOperationFilterInput
  sessionsAttendees: ListFilterInputOfFilterInputTypeOfSessionAttendeeFilterInput
}

input CheckInAttendeeInput {
  sessionId: ID!
  attendeeId: ID!
}

input ComparableOperationFilterInputOfInt32FilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableOperationFilterInputOfNullableOfDateTimeOffsetFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableOperationFilterInputOfNullableOfInt32FilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableOperationFilterInputOfTimeSpanFilterInput {
  eq: TimeSpan
  neq: TimeSpan
  in: [TimeSpan!]
  nin: [TimeSpan!]
  gt: TimeSpan
  ngt: TimeSpan
  gte: TimeSpan
  ngte: TimeSpan
  lt: TimeSpan
  nlt: TimeSpan
  lte: TimeSpan
  nlte: TimeSpan
}

input ListFilterInputOfFilterInputTypeOfSessionAttendeeFilterInput {
  all: SessionAttendeeFilterInput
  none: SessionAttendeeFilterInput
  some: SessionAttendeeFilterInput
  any: Boolean
}

input ListFilterInputOfFilterInputTypeOfSessionFilterInput {
  all: SessionFilterInput
  none: SessionFilterInput
  some: SessionFilterInput
  any: Boolean
}

input ListFilterInputOfFilterInputTypeOfSessionSpeakerFilterInput {
  all: SessionSpeakerFilterInput
  none: SessionSpeakerFilterInput
  some: SessionSpeakerFilterInput
  any: Boolean
}

input ModifySpeakerInput {
  id: ID!
  name: String
  bio: String
  webSite: String
}

input RegisterAttendeeInput {
  firstName: String!
  lastName: String!
  userName: String!
  emailAddress: String!
}

input RenameTrackInput {
  id: ID!
  name: String!
}

input ScheduleSessionInput {
  sessionId: ID!
  trackId: ID!
  startTime: DateTime!
  endTime: DateTime!
}

input SessionAttendeeFilterInput {
  and: [SessionAttendeeFilterInput!]
  or: [SessionAttendeeFilterInput!]
  sessionId: ComparableOperationFilterInputOfInt32FilterInput
  session: SessionFilterInput
  attendeeId: ComparableOperationFilterInputOfInt32FilterInput
  attendee: AttendeeFilterInput
}

input SessionFilterInput {
  and: [SessionFilterInput!]
  or: [SessionFilterInput!]
  id: ComparableOperationFilterInputOfInt32FilterInput
  title: StringOperationFilterInput
  abstract: StringOperationFilterInput
  startTime: ComparableOperationFilterInputOfNullableOfDateTimeOffsetFilterInput
  endTime: ComparableOperationFilterInputOfNullableOfDateTimeOffsetFilterInput
  duration: ComparableOperationFilterInputOfTimeSpanFilterInput
  trackId: ComparableOperationFilterInputOfNullableOfInt32FilterInput
  sessionSpeakers: ListFilterInputOfFilterInputTypeOfSessionSpeakerFilterInput
  sessionAttendees: ListFilterInputOfFilterInputTypeOfSessionAttendeeFilterInput
  track: TrackFilterInput
}

input SessionSortInput {
  id: DefaultSortEnumType
  title: DefaultSortEnumType
  abstract: DefaultSortEnumType
  startTime: DefaultSortEnumType
  endTime: DefaultSortEnumType
  duration: DefaultSortEnumType
  trackId: DefaultSortEnumType
  track: TrackSortInput
}

input SessionSpeakerFilterInput {
  and: [SessionSpeakerFilterInput!]
  or: [SessionSpeakerFilterInput!]
  sessionId: ComparableOperationFilterInputOfInt32FilterInput
  session: SessionFilterInput
  speakerId: ComparableOperationFilterInputOfInt32FilterInput
  speaker: SpeakerFilterInput
}

input SpeakerFilterInput {
  and: [SpeakerFilterInput!]
  or: [SpeakerFilterInput!]
  id: ComparableOperationFilterInputOfInt32FilterInput
  name: StringOperationFilterInput
  bio: StringOperationFilterInput
  webSite: StringOperationFilterInput
  sessionSpeakers: ListFilterInputOfFilterInputTypeOfSessionSpeakerFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input TrackFilterInput {
  and: [TrackFilterInput!]
  or: [TrackFilterInput!]
  id: ComparableOperationFilterInputOfInt32FilterInput
  name: StringOperationFilterInput
  sessions: ListFilterInputOfFilterInputTypeOfSessionFilterInput
}

input TrackSortInput {
  id: DefaultSortEnumType
  name: DefaultSortEnumType
}

enum DefaultSortEnumType {
  ASC
  DESC
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String, "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The @deprecated directive is used within the type system definition language to indicate deprecated portions of a GraphQL service’s schema,such as deprecated fields on a type or deprecated enum values."
directive @deprecated("Deprecations include a reason for why it is deprecated, which is formatted using Markdown syntax (as specified by CommonMark)." reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE

"Directs the executor to include this field or fragment only when the `if` argument is true."
directive @include("Included when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip("Skipped when true." if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String, "The initial elements that shall be send down to the consumer." initialCount: Int!, "Streamed when true." if: Boolean!) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan
