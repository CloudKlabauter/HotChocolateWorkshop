schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Attendee implements Node {
  id: ID!
  sessions: [Session!]!
  firstName: String!
  lastName: String!
  userName: String!
  emailAddress: String
}

"A connection to a list of items."
type AttendeesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AttendeesEdge!]
  "A flattened list of the nodes."
  nodes: [Attendee!]
}

"An edge in a connection."
type AttendeesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Attendee!
}

type CheckInAttendeePayload {
  session: Session
  attendee: Attendee
  errors: [UserError!]
}

type Mutation {
  registerAttendee(input: RegisterAttendeeInput!): RegisterAttendeePayload!
  checkInAttendee(input: CheckInAttendeeInput!): CheckInAttendeePayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  attendees("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): AttendeesConnection
  attendeeById(id: ID!): Attendee!
  attendeesById(ids: [ID!]!): [Attendee!]!
}

type RegisterAttendeePayload {
  attendee: Attendee
  errors: [UserError!]
}

type Session implements Node {
  id: ID!
  speakers: [Speaker!]!
  attendees: [Attendee!]!
  track: Track
  trackId: ID
  title: String!
  abstract: String
  startTime: DateTime
  endTime: DateTime
  duration: TimeSpan!
}

"A connection to a list of items."
type SessionsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SessionsEdge!]
  "A flattened list of the nodes."
  nodes: [Session!]
}

"An edge in a connection."
type SessionsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Session!
}

type Speaker implements Node {
  id: ID!
  sessions: [Session!]!
  name: String!
  bio: String
  webSite: String
}

type Track implements Node {
  id: ID!
  sessions("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): SessionsConnection
  name: String!
}

type UserError {
  message: String!
  code: String!
}

input CheckInAttendeeInput {
  sessionId: Int!
  attendeeId: Int!
}

input RegisterAttendeeInput {
  firstName: String!
  lastName: String!
  userName: String!
  emailAddress: String!
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! = 0 "Streamed when true." if: Boolean) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan
